// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `example.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ExampleRequest {
    // message fields
    pub id: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExampleRequest {
    fn default() -> &'a ExampleRequest {
        <ExampleRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExampleRequest {
    pub fn new() -> ExampleRequest {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }
}

impl ::protobuf::Message for ExampleRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExampleRequest {
        ExampleRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &ExampleRequest| { &m.id },
                |m: &mut ExampleRequest| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExampleRequest>(
                "ExampleRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExampleRequest {
        static instance: ::protobuf::rt::LazyV2<ExampleRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExampleRequest::new)
    }
}

impl ::protobuf::Clear for ExampleRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExampleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExampleRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExampleResponse {
    // message fields
    pub id: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExampleResponse {
    fn default() -> &'a ExampleResponse {
        <ExampleResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExampleResponse {
    pub fn new() -> ExampleResponse {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }
}

impl ::protobuf::Message for ExampleResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExampleResponse {
        ExampleResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &ExampleResponse| { &m.id },
                |m: &mut ExampleResponse| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExampleResponse>(
                "ExampleResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExampleResponse {
        static instance: ::protobuf::rt::LazyV2<ExampleResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExampleResponse::new)
    }
}

impl ::protobuf::Clear for ExampleResponse {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExampleResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExampleResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rexample.proto\x12\x04demo\x1a\x0cpandit.proto\x1a\x11format/http.pro\
    to\x1a\rhandler.proto\"*\n\x0eExampleRequest\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\x05R\x02id:\x08\xf2\xb6\x18\0\xc0\xb7\x18\x01\"'\n\x0fExampleRespo\
    nse\x12\x0e\n\x02id\x18\x01\x20\x01(\x05R\x02id:\x04\xf2\xb6\x18\02\x81\
    \x01\n\x0eExampleService\x12_\n\nGetExample\x12\x14.demo.ExampleRequest\
    \x1a\x15.demo.ExampleResponse\"$\xda\xb5\x18\x20\x82\xb5\x18\x10applicat\
    ion/json\x8a\xb5\x18\x08/example\x1a\x0e\xd2\xb5\x18\nmy_serviceJ\xb8\
    \x03\n\x06\x12\x04\0\0\x1b\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\
    \x03\0\x12\x03\x02\0\x16\n\t\n\x02\x03\x01\x12\x03\x03\0\x1b\n\t\n\x02\
    \x03\x02\x12\x03\x04\0\x17\n\x08\n\x01\x02\x12\x03\x06\0\r\n\n\n\x02\x04\
    \0\x12\x04\x08\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x16\n\n\n\
    \x03\x04\0\x07\x12\x03\t\x02\x1c\n\r\n\x06\x04\0\x07\xee\x86\x03\x12\x03\
    \t\x02\x1c\n\n\n\x03\x04\0\x07\x12\x03\n\x02&\n\r\n\x06\x04\0\x07\xf8\
    \x86\x03\x12\x03\n\x02&\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0b\x02\x0f\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x0b\x08\n\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0b\r\x0e\n\n\
    \n\x02\x04\x01\x12\x04\x0e\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\
    \x08\x17\n\n\n\x03\x04\x01\x07\x12\x03\x0f\x02\x1c\n\r\n\x06\x04\x01\x07\
    \xee\x86\x03\x12\x03\x0f\x02\x1c\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x10\
    \x02\x0f\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x10\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x10\x08\n\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x10\r\x0e\n\n\n\x02\x06\0\x12\x04\x13\0\x1b\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x13\x08\x16\n\n\n\x03\x06\0\x03\x12\x03\x14\x02&\n\r\n\x06\x06\
    \0\x03\xda\x86\x03\x12\x03\x14\x02&\n\x0c\n\x04\x06\0\x02\0\x12\x04\x15\
    \x02\x1a\x03\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x15\x06\x10\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x15\x11\x1f\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x15*9\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x16\x04\x19\x06\n\x10\n\x08\x06\
    \0\x02\0\x04\xdb\x86\x03\x12\x04\x16\x04\x19\x06b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
