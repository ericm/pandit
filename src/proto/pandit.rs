// This file is generated by rust-protobuf 3.0.0-alpha.2. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pandit.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_2;

/// Extension fields
pub mod exts {

    pub const absolute_path: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::reflect::types::ProtobufTypeString> = ::protobuf::ext::ExtFieldOptional { field_number: 50020, phantom: ::std::marker::PhantomData };

    pub const relative_path: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::reflect::types::ProtobufTypeString> = ::protobuf::ext::ExtFieldOptional { field_number: 50021, phantom: ::std::marker::PhantomData };

    pub const path: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::reflect::types::ProtobufTypeString> = ::protobuf::ext::ExtFieldOptional { field_number: 50030, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cpandit.proto\x12\x06pandit\x1a\x20google/protobuf/descriptor.proto\
    \x1a\nhttp.proto:D\n\rabsolute_path\x18\xe4\x86\x03\x20\x01(\t\x12\x1d.g\
    oogle.protobuf.FieldOptionsR\x0cabsolutePath:D\n\rrelative_path\x18\xe5\
    \x86\x03\x20\x01(\t\x12\x1d.google.protobuf.FieldOptionsR\x0crelativePat\
    h:5\n\x04path\x18\xee\x86\x03\x20\x01(\t\x12\x1f.google.protobuf.Message\
    OptionsR\x04pathJ\xa0\x02\n\x06\x12\x04\0\0\x0e\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x01\x07)\n\t\n\x02\x03\x01\x12\x03\
    \x02\x07\x13\n\x08\n\x01\x02\x12\x03\x04\x08\x0e\n\t\n\x01\x07\x12\x04\
    \x07\0\n\x01\n\t\n\x02\x07\0\x12\x03\x08\x02\x1f\n\n\n\x03\x07\0\x02\x12\
    \x03\x07\x07#\n\x0b\n\x03\x07\0\x04\x12\x04\x08\x02\x07%\n\n\n\x03\x07\0\
    \x05\x12\x03\x08\x02\x08\n\n\n\x03\x07\0\x01\x12\x03\x08\t\x16\n\n\n\x03\
    \x07\0\x03\x12\x03\x08\x19\x1e\n\t\n\x02\x07\x01\x12\x03\t\x02\x1f\n\n\n\
    \x03\x07\x01\x02\x12\x03\x07\x07#\n\x0b\n\x03\x07\x01\x04\x12\x04\t\x02\
    \x08\x1f\n\n\n\x03\x07\x01\x05\x12\x03\t\x02\x08\n\n\n\x03\x07\x01\x01\
    \x12\x03\t\t\x16\n\n\n\x03\x07\x01\x03\x12\x03\t\x19\x1e\n\t\n\x01\x07\
    \x12\x04\x0c\0\x0e\x01\n\t\n\x02\x07\x02\x12\x03\r\x02\x16\n\n\n\x03\x07\
    \x02\x02\x12\x03\x0c\x07%\n\x0b\n\x03\x07\x02\x04\x12\x04\r\x02\x0c'\n\n\
    \n\x03\x07\x02\x05\x12\x03\r\x02\x08\n\n\n\x03\x07\x02\x01\x12\x03\r\t\r\
    \n\n\n\x03\x07\x02\x03\x12\x03\r\x10\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(::protobuf::descriptor::file_descriptor());
        deps.push(super::http::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
