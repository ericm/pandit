// This file is generated by rust-protobuf 3.0.0-alpha.2. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `example.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_2;

#[derive(PartialEq,Clone,Default)]
pub struct ExampleRequest {
    // message fields
    pub name: ::std::string::String,
    pub id: i32,
    pub numbers: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExampleRequest {
    fn default() -> &'a ExampleRequest {
        <ExampleRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExampleRequest {
    pub fn new() -> ExampleRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ExampleRequest| { &m.name },
            |m: &mut ExampleRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ExampleRequest| { &m.id },
            |m: &mut ExampleRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "numbers",
            |m: &ExampleRequest| { &m.numbers },
            |m: &mut ExampleRequest| { &mut m.numbers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExampleRequest>(
            "ExampleRequest",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for ExampleRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_int32()?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.numbers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.numbers {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.id != 0 {
            os.write_int32(2, self.id)?;
        }
        for v in &self.numbers {
            os.write_int32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ExampleRequest {
        ExampleRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static ExampleRequest {
        static instance: ExampleRequest = ExampleRequest {
            name: ::std::string::String::new(),
            id: 0,
            numbers: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ExampleRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.id = 0;
        self.numbers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExampleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExampleRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct ExampleResponse {
    // message fields
    pub name: ::std::string::String,
    pub id: i32,
    pub numbers: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExampleResponse {
    fn default() -> &'a ExampleResponse {
        <ExampleResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExampleResponse {
    pub fn new() -> ExampleResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ExampleResponse| { &m.name },
            |m: &mut ExampleResponse| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ExampleResponse| { &m.id },
            |m: &mut ExampleResponse| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "numbers",
            |m: &ExampleResponse| { &m.numbers },
            |m: &mut ExampleResponse| { &mut m.numbers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExampleResponse>(
            "ExampleResponse",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for ExampleResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_int32()?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.numbers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.numbers {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.id != 0 {
            os.write_int32(2, self.id)?;
        }
        for v in &self.numbers {
            os.write_int32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ExampleResponse {
        ExampleResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static ExampleResponse {
        static instance: ExampleResponse = ExampleResponse {
            name: ::std::string::String::new(),
            id: 0,
            numbers: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ExampleResponse {
    fn clear(&mut self) {
        self.name.clear();
        self.id = 0;
        self.numbers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExampleResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExampleResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rexample.proto\x12\x04demo\x1a\x0cpandit.proto\x1a\nhttp.proto\"V\n\
    \x0eExampleRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x0e\
    \n\x02id\x18\x02\x20\x01(\x05R\x02id\x12\x18\n\x07numbers\x18\x03\x20\
    \x03(\x05R\x07numbers:\x06\xf2\xb6\x18\x02.0\"W\n\x0fExampleResponse\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x0e\n\x02id\x18\x02\x20\
    \x01(\x05R\x02id\x12\x18\n\x07numbers\x18\x03\x20\x03(\x05R\x07numbers:\
    \x06\xf2\xb6\x18\x02.02\x81\x01\n\x0eExampleService\x12_\n\nGetExample\
    \x12\x14.demo.ExampleRequest\x1a\x15.demo.ExampleResponse\"$\xda\xb5\x18\
    \x20\x82\xb5\x18\x10application/json\x8a\xb5\x18\x08/example\x1a\x0e\xd2\
    \xb5\x18\nmy_serviceJ\xc6\x05\n\x06\x12\x04\0\0\x1d\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\x07\x15\n\t\n\x02\x03\x01\
    \x12\x03\x03\x07\x13\n\x08\n\x01\x02\x12\x03\x05\x08\x0c\n\n\n\x02\x04\0\
    \x12\x04\x07\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x16\n\n\n\x03\
    \x04\0\x07\x12\x03\x08\x02\x1e\n\r\n\x06\x04\0\x07\xee\x86\x03\x12\x03\
    \x08\x02\x1e\n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x02\x12\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\t\x02\x08\x1e\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\t\r\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\t\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x02\x0f\n\r\
    \n\x05\x04\0\x02\x01\x04\x12\x04\n\x02\t\x12\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\x08\n\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n\r\x0e\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03\x0b\x02\x1d\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x0b\x02\n\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0b\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x0b\x11\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\
    \x1b\x1c\n\n\n\x02\x04\x01\x12\x04\x0e\0\x13\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x0e\x08\x17\n\n\n\x03\x04\x01\x07\x12\x03\x0f\x02\x1e\n\r\n\x06\
    \x04\x01\x07\xee\x86\x03\x12\x03\x0f\x02\x1e\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x10\x02\x12\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x10\x02\x0f\x1e\
    \n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\x10\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10\x10\
    \x11\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x11\x02\x0f\n\r\n\x05\x04\x01\
    \x02\x01\x04\x12\x04\x11\x02\x10\x12\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03\x11\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x11\x08\n\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x03\x11\r\x0e\n\x0b\n\x04\x04\x01\x02\x02\
    \x12\x03\x12\x02\x1d\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x12\x02\n\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x12\x0b\x10\n\x0c\n\x05\x04\x01\
    \x02\x02\x01\x12\x03\x12\x11\x18\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\
    \x12\x1b\x1c\n\n\n\x02\x06\0\x12\x04\x15\0\x1d\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x15\x08\x16\n\n\n\x03\x06\0\x03\x12\x03\x16\x02+\n\r\n\x06\x06\
    \0\x03\xda\x86\x03\x12\x03\x16\x02+\n\x0c\n\x04\x06\0\x02\0\x12\x04\x17\
    \x02\x1c\x03\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x17\x06\x10\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x17\x11\x1f\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x17*9\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x18\x04\x1b\x06\n\x10\n\x08\x06\
    \0\x02\0\x04\xdb\x86\x03\x12\x04\x18\x04\x1b\x06b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::pandit::file_descriptor());
        deps.push(super::http::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(ExampleRequest::generated_message_descriptor_data());
        messages.push(ExampleResponse::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}

